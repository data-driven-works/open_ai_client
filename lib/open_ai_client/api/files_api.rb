=begin
#OpenAI API

#The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.54
=end

module OpenAIClient
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
    # @param file 
    # @param purpose 
    # @param [Hash] opts the optional parameters
    # @return [OpenAIFile]
    def create_file(file, purpose, opts = {})
      data, _status_code, _headers = create_file_with_http_info(file, purpose, opts)
      data
    end

    # Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports &#x60;.jsonl&#x60; files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 
    # @param file 
    # @param purpose 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OpenAIFile, Integer, Hash)>] OpenAIFile data, response status code and response headers
    def create_file_with_http_info(file, purpose, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.create_file ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.create_file"
      end
      # verify the required parameter 'purpose' is set
      if @api_client.config.client_side_validation && purpose.nil?
        fail ArgumentError, "Missing the required parameter 'purpose' when calling FilesApi.create_file"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['fine-tune', 'assistants'].include?(purpose)
        fail ArgumentError, "invalid value for 'purpose', must be one of fine-tune, assistants"
      end
      # resource path
      local_var_path = '/files'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['purpose'] = purpose

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'OpenAIFile' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#create_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a file.
    # @param file_id The ID of the file to use for this request.
    # @param [Hash] opts the optional parameters
    # @return [DeleteFileResponse]
    def delete_file(file_id, opts = {})
      data, _status_code, _headers = delete_file_with_http_info(file_id, opts)
      data
    end

    # Delete a file.
    # @param file_id The ID of the file to use for this request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteFileResponse, Integer, Hash)>] DeleteFileResponse data, response status code and response headers
    def delete_file_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.delete_file ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.delete_file"
      end
      # resource path
      local_var_path = '/files/{file_id}'.sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'DeleteFileResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns the contents of the specified file.
    # @param file_id The ID of the file to use for this request.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def download_file(file_id, opts = {})
      data, _status_code, _headers = download_file_with_http_info(file_id, opts)
      data
    end

    # Returns the contents of the specified file.
    # @param file_id The ID of the file to use for this request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def download_file_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.download_file ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.download_file"
      end
      # resource path
      local_var_path = '/files/{file_id}/content'.sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#download_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns a list of files that belong to the user's organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :purpose Only return files with the given purpose.
    # @return [ListFilesResponse]
    def list_files(opts = {})
      data, _status_code, _headers = list_files_with_http_info(opts)
      data
    end

    # Returns a list of files that belong to the user&#x27;s organization.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :purpose Only return files with the given purpose.
    # @return [Array<(ListFilesResponse, Integer, Hash)>] ListFilesResponse data, response status code and response headers
    def list_files_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.list_files ...'
      end
      # resource path
      local_var_path = '/files'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'purpose'] = opts[:'purpose'] if !opts[:'purpose'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'ListFilesResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#list_files\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Returns information about a specific file.
    # @param file_id The ID of the file to use for this request.
    # @param [Hash] opts the optional parameters
    # @return [OpenAIFile]
    def retrieve_file(file_id, opts = {})
      data, _status_code, _headers = retrieve_file_with_http_info(file_id, opts)
      data
    end

    # Returns information about a specific file.
    # @param file_id The ID of the file to use for this request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(OpenAIFile, Integer, Hash)>] OpenAIFile data, response status code and response headers
    def retrieve_file_with_http_info(file_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.retrieve_file ...'
      end
      # verify the required parameter 'file_id' is set
      if @api_client.config.client_side_validation && file_id.nil?
        fail ArgumentError, "Missing the required parameter 'file_id' when calling FilesApi.retrieve_file"
      end
      # resource path
      local_var_path = '/files/{file_id}'.sub('{' + 'file_id' + '}', file_id.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'OpenAIFile' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#retrieve_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
